---
import { getIndex, getEntries } from "@lib/contentParser";
import { getTaxa } from "@lib/taxonomyParser";
import { sortByTitle } from "@lib/sortFunctions";
import CollectionLayout from "@components/drinks/CollectionLayout.astro";
import type { DrinksEntry } from "@/types";

const { page } = Astro.params;

const entryIndex = (await getIndex("drinks")) as DrinksEntry;
const entries = (await getEntries("drinks", sortByTitle)) as DrinksEntry[];

const bottles = await getTaxa("drinks", "bottles");
const spirits = await getTaxa("drinks", "spirits");
const tags = await getTaxa("drinks", "tags");

const entriesPerPage = 8;
const currentPageIndex = page && !isNaN(Number(page)) ? Number(page) : 1;
const pageCount = Math.ceil(entries.length / entriesPerPage);
const indexOfLastEntry = currentPageIndex * entriesPerPage;
const indexOfFirstEntry = indexOfLastEntry - entriesPerPage;
const currentEntries = entries.slice(indexOfFirstEntry, indexOfLastEntry);

export async function getStaticPaths() {
  const entries = (await getEntries("drinks", sortByTitle)) as DrinksEntry[];
  // divisor below must equal entriesPerPage
  const pageCount = Math.ceil(entries.length / 8);
  const paths = [];

  for (let i = 1; i < pageCount; i++) {
    paths.push({
      params: {
        page: (i + 1).toString(),
      },
    });
  }
  return paths;
}
---

<CollectionLayout
  entryIndex={entryIndex}
  entries={currentEntries}
  bottles={bottles}
  spirits={spirits}
  tags={tags}
  pageIndex={currentPageIndex}
  pageCount={pageCount}
/>
